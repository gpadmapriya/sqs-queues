/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sqs.queues;
//package sqs;
import com.amazonaws.services.sqs.AmazonSQS;
import com.amazonaws.services.sqs.AmazonSQSClientBuilder;
import com.amazonaws.services.sqs.model.AmazonSQSException;
import com.amazonaws.services.sqs.model.CreateQueueResult;
import com.amazonaws.services.sqs.model.Message;
import com.amazonaws.services.sqs.model.SendMessageBatchRequest;
import com.amazonaws.services.sqs.model.SendMessageBatchRequestEntry;
import com.amazonaws.services.sqs.model.SendMessageRequest;
import java.util.Date;
import java.util.List;

public class Publisher {


    private static final String QUEUE_NAMEA = "QueueA" ;
    private static final String QUEUE_NAMEB = "QueueB" ;
    private static final String QUEUE_NAMEC = "QueueC" ;

    public static void main(String[] args)
    {
        final AmazonSQS sqs = AmazonSQSClientBuilder.defaultClient();

        try {
            CreateQueueResult create_result = sqs.createQueue(QUEUE_NAMEA);
        } catch (AmazonSQSException e) {
            if (!e.getErrorCode().equals("QueueAlreadyExists")) {
                throw e;
            }
        }

        try {
            CreateQueueResult create_result = sqs.createQueue(QUEUE_NAMEB);
        } catch (AmazonSQSException e) {
            if (!e.getErrorCode().equals("QueueAlreadyExists")) {
                throw e;
            }
        }
        try {
            CreateQueueResult create_result = sqs.createQueue(QUEUE_NAMEC);
        } catch (AmazonSQSException e) {
            if (!e.getErrorCode().equals("QueueAlreadyExists")) {
                throw e;
            }
        }

        String queueUrlA = sqs.getQueueUrl(QUEUE_NAMEA).getQueueUrl();
        String queueUrlB = sqs.getQueueUrl(QUEUE_NAMEB).getQueueUrl();
        String queueUrlC = sqs.getQueueUrl(QUEUE_NAMEC).getQueueUrl();

        SendMessageRequest send_msg_request = new SendMessageRequest()
                .withQueueUrl(queueUrlA)
                .withMessageBody("hello world")
                .withDelaySeconds(5);
        sqs.sendMessage(send_msg_request);


        // Send multiple messages to the queue
        SendMessageBatchRequest send_batch_requestB = new SendMessageBatchRequest()
                .withQueueUrl(queueUrlB)
                .withEntries(
                        new SendMessageBatchRequestEntry(
                                "msg_1", "Hello from message 1B"),
                        new SendMessageBatchRequestEntry(
                                "msg_2", "Hello from message 2B")
                                .withDelaySeconds(10));
        sqs.sendMessageBatch(send_batch_requestB);

        SendMessageBatchRequest send_batch_requestC = new SendMessageBatchRequest()
                .withQueueUrl(queueUrlC)
                .withEntries(
                        new SendMessageBatchRequestEntry(
                                "msg_1", "Hello from message 1C"),
                        new SendMessageBatchRequestEntry(
                                "msg_2", "Hello from message 2C")
                                .withDelaySeconds(10));
        sqs.sendMessageBatch(send_batch_requestC);

    }
}

